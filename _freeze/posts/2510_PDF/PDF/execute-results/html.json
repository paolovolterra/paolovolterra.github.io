{
  "hash": "f4caba52952d7bfba6461fef546bc4e3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"I PDF Intelligenti\"\nsubtitle: \"_il valore dei PDF nativi digitali, la loro utilita' per l'intelligenza artificiale e il loro contributo all'ecosostenibilita'_ \"\ndraft: true\n\ndate: 2025-01-16\ncreated: 2025-01-16\nupdated: 2025-01-16\nlang: it\ntags: [PDF, AI]\nauthor: \"Paolo Volterra\"\n\nformat:\n  html:\n    toc: true             # Abilita il sommario\n    toc-depth: 3          # Mostra fino al terzo livello di intestazioni\n    number-sections: true # Aggiunge numeri alle sezioni e sottosezioni\n    toc-location: right   # Posiziona il sommario a sinistra (o usa `right` per destra)\n    toc-title: \"Indice\"   # (Facoltativo) Titolo del sommario\n    \n    code-fold: true  # Permette di piegare il codice (opzionale)\n\ncategories:\n  - PDF\n  - AI\n  - Python\n\njupyter: \"python3\"\nexecute:\n  echo: true        # Mostra il codice nei blocchi\n  eval: false       # Non esegue il codice\n\n# 1. quarto preview d:/paolovolterra.github.io/posts/2508_RNA/RNA.qmd\n# 2. quarto render d:/paolovolterra.github.io/posts/2508_RNA/RNA.qmd\n# 3. git add d:/paolovolterra.github.io/docs/posts/2508_RNA/RNA.html\n# 4. git status\n# 5. git add . (se hai rilevato altre modifiche e le voi introitare)\n# 6. git commit -m \"Aggiornata la pagina: RNA\"\n# 7. git pull origin main --rebase\n# 8. git push origin main\n# 9. git log\n---\n\n\n\n\n![](./media/pdf.webp)\n\n# I PDF Intelligenti: Ecosostenibilità e Utilità per l'Intelligenza Artificiale\n\nNell’era digitale, i documenti in formato PDF sono strumenti fondamentali per condividere informazioni. \n\nTuttavia, non tutti i PDF sono uguali: quelli creati direttamente da computer offrono vantaggi significativi rispetto a quelli generati tramite scansioni. \n\n\n---\n\n## I PDF \"Nativi Digitali\"\n\n\n![](./media/metadati.webp)\n\nUn PDF è considerato \"nativo digitale\" quando viene creato direttamente da un software, come Word, Excel o altri strumenti di produttività. Questi file contengono informazioni strutturate e metadati che li rendono facilmente leggibili sia dagli esseri umani che dalle macchine. Al contrario, i PDF generati da scansioni sono immagini statiche che non includono dati strutturati.\n\n**Caratteristiche principali dei PDF nativi:**\n\n1. **Testo Selezionabile e Ricercabile:** Il testo è memorizzato in un formato leggibile, consentendo ricerche rapide e selezioni facili.\n2. **Metadati Utili:** I PDF nativi includono informazioni aggiuntive come titolo, autore, parole chiave e data di creazione.\n3. **Compatibilità con l'Intelligenza Artificiale:** Gli algoritmi possono analizzare il contenuto per estrarre dati, categorizzare informazioni e molto altro.\n4. **Firmabili Digitalmente:** I PDF nativi possono essere facilmente firmati digitalmente, garantendo autenticazione, integrità e validità legale.\n\n---\n\n## Perché Evitare le Scansioni?\n\nI PDF generati da scansioni presentano numerosi svantaggi:\n\n- **Mancanza di Accessibilità:** Il testo è incorporato come immagine, rendendo difficile l'accesso per software di lettura automatica.\n- **Maggiore Peso del File:** I documenti scansionati richiedono più spazio di archiviazione.\n- **Ridotta Efficienza Energetica:** L'elaborazione di immagini richiede più risorse computazionali rispetto al testo puro.\n\n---\n\n## Ecosostenibilità dei PDF Nativi\n\nAdottare PDF nativi digitali è una scelta che favorisce l'ambiente:\n\n1. **Riduzione del Consumo di Carta:** I documenti digitali eliminano la necessità di stampe fisiche.\n2. **Minore Impatto Energetico:** La creazione e l'archiviazione di PDF nativi richiede meno energia rispetto alla gestione di scansioni.\n3. **Supporto al Lavoro Remoto:** Condividere file digitali facilita la collaborazione a distanza, riducendo la necessità di trasporti e riunioni in presenza.\n\n---\n\n## Metadati: Il Valore Aggiunto\n\nI metadati rappresentano un elemento cruciale per rendere un documento utile nel contesto dell'intelligenza artificiale. Alcuni esempi includono:\n\n- **Descrizione del Contenuto:** Per favorire l’indicizzazione nei motori di ricerca.\n- **Dati Strutturati:** Essenziali per l’estrazione di informazioni tramite algoritmi di machine learning.\n- **Informazioni di Licenza:** Per garantire un utilizzo corretto dei documenti.\n\n---\n\n## Raccomandazioni Finali\n\nPer ottimizzare la creazione di PDF ecosostenibili e intelligenti:\n\n1. **Usare Software Adeguati:** Strumenti come Adobe Acrobat, Microsoft Office e LibreOffice consentono di creare PDF nativi.\n2. **Evitare le Stampa Fisica:** Condividere i file digitalmente riduce l’impatto ambientale.\n3. **Aggiungere Metadati Completi:** Inserire informazioni rilevanti durante la creazione del file.\n4. **Promuovere la Digitalizzazione Consapevole:** Educare aziende e individui sui benefici dei PDF nativi.\n5. **Utilizzare la Firma Digitale:** Applicare firme digitali per migliorare la sicurezza e la legalità dei documenti condivisi.\n\n---\n\nScegliere PDF nativi digitali non è solo una decisione pratica, ma un passo verso un futuro più sostenibile e tecnologicamente avanzato. \n\nAbbracciamo questa opportunità per ridurre il nostro impatto ambientale e migliorare l’interazione tra uomo e macchina.\n\n## come è fatto un PDF\n\n\n![](./media/PdfInside.webp)\n\n\nUn file PDF è composto da diverse sezioni principali che lavorano insieme per organizzare i contenuti e le informazioni in modo efficace:\n\n- Header (Intestazione): Contiene informazioni di base sul documento, come la versione del formato PDF e l'identificatore del file.\n\n- Body (Corpo): La parte principale del PDF, che include testo, immagini, grafici e altri contenuti visuali. Ogni elemento è organizzato in pagine e descritto tramite comandi specifici.\n\n- Metadata (Metadati): Fornisce informazioni aggiuntive sul documento, come il titolo, l'autore, la data di creazione, e le parole chiave. Questi dati sono essenziali per la ricerca e la classificazione automatica.\n\n- Cross-Reference Table: Un indice che elenca tutte le posizioni degli oggetti nel file, utile per un accesso rapido ai contenuti.\n\n- Trailer (Piè di pagina): Chiude il file, indicando la posizione della tabella di riferimento incrociato e altre informazioni necessarie per la lettura del documento.\n\nQuesta struttura gerarchica consente ai PDF di essere compatti, versatili e facilmente leggibili sia dagli esseri umani che dai computer.\n\n\n\n\n\n```{txt}\n%PDF-1.3\n3 0 obj\n<</Type /Page\n/Parent 1 0 R\n/Resources 2 0 R\n/Contents 4 0 R>>\nendobj\n4 0 obj\n<</Filter /FlateDecode /Length 230>>\nstream\nxœUP1NÄ0\u0010ìýŠ)¡`ñÚÞ¬M‰à@Tˆ‹D}Jr\u0011(pR\u001a¾“Ø\u0007×Œ5Þ™ñz\u001c^Œ%Qü˜û\u0016·;\u0006;²\u0016í\u0011írå‚#Ð$¤Š¶ÇÕópè‡ù\u000eûïq\u001aðz\u00183<ì®Ñ~\u0016Ï\u001aÓ\\Äx&NP¯\u0014kÊ4ð~š§¾:mvXlÈ+¾=\u0019\u001f,q\u0003‘HÁã\u000b•G¦Äð.ç:4ÖR\u0012¸¤Ô„Ê:ã4\u0010Ëy*²h‹³²-7k\u000b÷R@q\nËªÝr\u000bëLyµðºÑæ¼Ü·Ã>KcÀœGã\\³ô)–I=8¬ÇM\u0014²y<àx®ÑþÕø\u000b@†YÐ\nendstream\nendobj\n5 0 obj\n<</Type /Page\n/Parent 1 0 R\n/Resources 2 0 R\n/Contents 6 0 R>>\nendobj\n6 0 obj\n<</Filter /FlateDecode /Length 108>>\nstream\nxœ3Rðâ2Ð35W(çr\nQÐw3T04Ð30P\bISp\ná\u00021\n\u0014 ¤!˜\fr\u0007\nš[˜( “Eé\\…\n\u0006\né\n@#ŒÌLôLÍ\u0014Ì-ÍôŒÍ\u0015BR\u00144ÜòóKR‹¬\u0014\u0002\u0012ÓS\u0015\f5\u0015B²€F+\u0004r\u0001 \u0014ì\u001aÑ\nendstream\nendobj\n1 0 obj\n<</Type /Pages\n/Kids [3 0 R 5 0 R ]\n/Count 2\n/MediaBox [0 0 595.28 841.89]\n>>\nendobj\n7 0 obj\n<</Type /Font\n/BaseFont /Helvetica\n/Subtype /Type1\n/Encoding /WinAnsiEncoding\n>>\nendobj\n2 0 obj\n<<\n/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]\n/Font <<\n/F1 7 0 R\n>>\n/XObject <<\n>>\n>>\nendobj\n8 0 obj\n<<\n/Producer (PyFPDF 1.7.2 http://pyfpdf.googlecode.com/)\n/CreationDate (D:20250116092954)\n>>\nendobj\n9 0 obj\n<<\n/Type /Catalog\n/Pages 1 0 R\n/OpenAction [3 0 R /FitH null]\n/PageLayout /OneColumn\n>>\nendobj\nxref\n0 10\n0000000000 65535 f \n0000000643 00000 n \n0000000832 00000 n \n0000000009 00000 n \n0000000087 00000 n \n0000000387 00000 n \n0000000465 00000 n \n0000000736 00000 n \n0000000936 00000 n \n0000001045 00000 n \ntrailer\n<<\n/Size 10\n/Root 9 0 R\n/Info 8 0 R\n>>\nstartxref\n1148\n%%EOF\n\n```\n\n\n\n\nQuesto script è un file PDF espresso in formato testuale. Può essere suddiviso in sezioni principali per comprenderne la struttura:\n\n---\n\n### 1. **Dichiarazione della versione PDF**\n   ```plaintext\n   %PDF-1.3\n   ```\n   Specifica che il file utilizza la versione 1.3 del formato PDF.\n\n---\n\n### 2. **Oggetti principali**\n   - **Oggetto 3**: Descrive una pagina del documento.\n     ```plaintext\n     3 0 obj\n     <</Type /Page\n     /Parent 1 0 R\n     /Resources 2 0 R\n     /Contents 4 0 R>>\n     endobj\n     ```\n     - Tipo: `/Page`\n     - Collegamento alla struttura genitore (`/Parent 1 0 R`).\n     - Risorse della pagina (`/Resources 2 0 R`).\n     - Contenuto della pagina (`/Contents 4 0 R`).\n\n   - **Oggetto 4**: Contiene i dati compressi della pagina (testo e grafica).\n     ```plaintext\n     4 0 obj\n     <</Filter /FlateDecode /Length 230>>\n     stream\n     ... [Dati compressi] ...\n     endstream\n     endobj\n     ```\n\n   - **Oggetto 5**: Descrive un'altra pagina del documento.\n     ```plaintext\n     5 0 obj\n     <</Type /Page\n     /Parent 1 0 R\n     /Resources 2 0 R\n     /Contents 6 0 R>>\n     endobj\n     ```\n\n   - **Oggetto 6**: Contiene i dati compressi della seconda pagina.\n     ```plaintext\n     6 0 obj\n     <</Filter /FlateDecode /Length 108>>\n     stream\n     ... [Dati compressi] ...\n     endstream\n     endobj\n     ```\n\n---\n\n### 3. **Struttura delle pagine**\n   - **Oggetto 1**: Organizza le pagine.\n     ```plaintext\n     1 0 obj\n     <</Type /Pages\n     /Kids [3 0 R 5 0 R ]\n     /Count 2\n     /MediaBox [0 0 595.28 841.89]\n     >>\n     endobj\n     ```\n     - Tipo: `/Pages`.\n     - Elenco delle pagine (`/Kids`).\n     - Numero di pagine (`/Count 2`).\n     - Dimensioni della pagina (`/MediaBox`).\n\n---\n\n### 4. **Font**\n   - **Oggetto 7**: Specifica il font utilizzato.\n     ```plaintext\n     7 0 obj\n     <</Type /Font\n     /BaseFont /Helvetica\n     /Subtype /Type1\n     /Encoding /WinAnsiEncoding\n     >>\n     endobj\n     ```\n\n---\n\n### 5. **Risorse**\n   - **Oggetto 2**: Collega il font alle risorse della pagina.\n     ```plaintext\n     2 0 obj\n     <<\n     /ProcSet [/PDF /Text /ImageB /ImageC /ImageI]\n     /Font <<\n     /F1 7 0 R\n     >>\n     /XObject <<\n     >>\n     >>\n     endobj\n     ```\n\n---\n\n### 6. **Metadati**\n   - **Oggetto 8**: Contiene informazioni sul produttore e la data di creazione.\n     ```plaintext\n     8 0 obj\n     <<\n     /Producer (PyFPDF 1.7.2 http://pyfpdf.googlecode.com/)\n     /CreationDate (D:20250116092954)\n     >>\n     endobj\n     ```\n\n---\n\n### 7. **Catalogo**\n   - **Oggetto 9**: Collega le pagine al catalogo principale del PDF.\n     ```plaintext\n     9 0 obj\n     <<\n     /Type /Catalog\n     /Pages 1 0 R\n     /OpenAction [3 0 R /FitH null]\n     /PageLayout /OneColumn\n     >>\n     endobj\n     ```\n\n---\n\n### 8. **Tabella di riferimento incrociato (xref)**\n   ```plaintext\n   xref\n   0 10\n   0000000000 65535 f\n   0000000643 00000 n\n   ...\n   ```\n\n   La tabella di riferimento collega gli oggetti ai loro offset nel file.\n\n---\n\n### 9. **Trailer**\n   ```plaintext\n   trailer\n   <<\n   /Size 10\n   /Root 9 0 R\n   /Info 8 0 R\n   >>\n   ```\n\n   Indica la dimensione del file, il catalogo (`/Root`) e i metadati (`/Info`).\n\n---\n\n### 10. **Fine del file**\n   ```plaintext\n   startxref\n   1148\n   %%EOF\n   ```\n\n   Specifica la posizione della tabella `xref` e segna la fine del file PDF.\n\n---\n\nQuesta suddivisione evidenzia come il PDF sia organizzato in oggetti interconnessi che definiscono il contenuto, le risorse e i metadati del documento.\n\n\n# modificare le caratteristiche con un editor\n\nModificare un file PDF direttamente in formato testuale con un editor (come Notepad++) richiede precisione. Ecco un esempio pratico e dettagliato:\n\n---\n\n### Obiettivo: Aggiungere un titolo (`/Title`) ai metadati del file.\n\nNel file fornito, i metadati sono definiti nell'oggetto **8 0 obj**:\n```plaintext\n8 0 obj\n<<\n/Producer (PyFPDF 1.7.2 http://pyfpdf.googlecode.com/)\n/CreationDate (D:20250116092954)\n>>\nendobj\n```\n\n### Passaggi:\n1. **Apri il file PDF con un editor di testo**:\n   - Usa un editor come **Notepad++** o **VS Code**.\n   - Assicurati di non modificare accidentalmente la struttura del file.\n\n2. **Trova i metadati**:\n   - Cerca l'oggetto che contiene il campo `/Producer`.\n\n3. **Modifica i metadati**:\n   - Aggiungi una nuova linea con il campo `/Title`.\n\n### Modifica:\nEcco il risultato dopo la modifica:\n```plaintext\n8 0 obj\n<<\n/Producer (PyFPDF 1.7.2 http://pyfpdf.googlecode.com/)\n/CreationDate (D:20250116092954)\n/Title (Document Title Example)\n>>\nendobj\n```\n\n---\n\n### Aggiornamento della tabella `xref`\nDopo aver modificato il file, è necessario aggiornare la tabella di riferimento incrociato (`xref`), che elenca gli offset di ciascun oggetto.\n\n#### Calcolo degli Offset:\nL'offset è la posizione del primo carattere dell'oggetto nel file, partendo da `0`. Puoi calcolarlo usando un editor avanzato che mostra la posizione del cursore in byte.\n\nEsempio di tabella aggiornata:\n```plaintext\nxref\n0 10\n0000000000 65535 f \n0000000643 00000 n \n0000000832 00000 n \n...\n```\n\n---\n\n### Verifica della Modifica\n1. Salva il file come nuovo PDF.\n2. Apri il PDF in un visualizzatore (come Adobe Reader) e verifica che il titolo sia stato aggiornato:\n   - **File > Proprietà > Descrizione**.\n\n---\n\n### Nota Importante:\nModificare un PDF a livello testuale è delicato. Se sbagli anche solo un carattere, il file potrebbe corrompersi. Questo metodo è utile solo per piccole modifiche ai metadati o al contenuto semplice.\n\nPer modifiche più complesse, è consigliabile usare strumenti dedicati come:\n- **`PyPDF2`** o **`pikepdf`** per modificare i PDF programmaticamente.\n- **Adobe Acrobat Pro** per modifiche visuali. \n\n\n\n\n# creare un PDF con Python\n\n::: {#d3f97489 .cell execution_count=1}\n``` {.python .cell-code}\nfrom fpdf import FPDF\n\n# Create an instance of FPDF\npdf = FPDF()\npdf.add_page()\n\n# Add header\npdf.set_font(\"Arial\", size=12)\npdf.cell(200, 10, txt=\"Header: Single Page PDF\", ln=True, align='C')\n\n# Add \"Hello World\" text\npdf.ln(10)\npdf.set_font(\"Arial\", size=16)\npdf.cell(200, 10, txt=\"Hello World\", ln=True, align='L')\n\n# Add a circle (approximated using ellipse function)\npdf.set_draw_color(0, 0, 255)\nx_center, y_center, radius = 105, 100, 15\npdf.ellipse(x_center - radius, y_center - radius, radius * 2, radius * 2)\n\n# Add placeholder for the image\npdf.ln(20)\npdf.set_fill_color(200, 200, 200)  # Light gray placeholder for image\npdf.rect(80, 120, 50, 30, 'F')  # Placeholder rectangle\n\n# Add footer\npdf.set_y(-20)\npdf.set_font(\"Arial\", size=10)\npdf.cell(0, 10, \"Footer: Page 1\", 0, 0, 'C')\n\n# Save the PDF to a file\npdf.output(\"single_page_pdf.pdf\")\n```\n:::\n\n\n",
    "supporting": [
      "PDF_files"
    ],
    "filters": [],
    "includes": {}
  }
}