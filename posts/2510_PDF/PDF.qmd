---
title: "I PDF Intelligenti"
subtitle: "_il valore dei PDF nativi digitali, la loro utilita' per l'intelligenza artificiale e il loro contributo all'ecosostenibilita'_ "
draft: true

date: 2025-01-16
created: 2025-01-16
updated: 2025-01-16
lang: it
tags: [PDF, AI]
author: "Paolo Volterra"

format:
  html:
    toc: true             # Abilita il sommario
    toc-depth: 3          # Mostra fino al terzo livello di intestazioni
    number-sections: true # Aggiunge numeri alle sezioni e sottosezioni
    toc-location: right   # Posiziona il sommario a sinistra (o usa `right` per destra)
    toc-title: "Indice"   # (Facoltativo) Titolo del sommario
    
    code-fold: true  # Permette di piegare il codice (opzionale)

categories:
  - PDF
  - AI
  - Python

jupyter: "python3"
execute:
  echo: true        # Mostra il codice nei blocchi
  eval: false       # Non esegue il codice

# 1. quarto preview d:/paolovolterra.github.io/posts/2508_RNA/RNA.qmd
# 2. quarto render d:/paolovolterra.github.io/posts/2508_RNA/RNA.qmd
# 3. git add d:/paolovolterra.github.io/docs/posts/2508_RNA/RNA.html
# 4. git status
# 5. git add . (se hai rilevato altre modifiche e le voi introitare)
# 6. git commit -m "Aggiornata la pagina: RNA"
# 7. git pull origin main --rebase
# 8. git push origin main
# 9. git log
---

![](./media/pdf.webp)

# I PDF Intelligenti: Ecosostenibilit√† e Utilit√† per l'Intelligenza Artificiale

Nell‚Äôera digitale, i documenti in formato PDF sono strumenti fondamentali per condividere informazioni. 

Tuttavia, non tutti i PDF sono uguali: quelli creati direttamente da computer offrono vantaggi significativi rispetto a quelli generati tramite scansioni. 


---

## I PDF "Nativi Digitali"


![](./media/metadati.webp)

Un PDF √® considerato "nativo digitale" quando viene creato direttamente da un software, come Word, Excel o altri strumenti di produttivit√†. Questi file contengono informazioni strutturate e metadati che li rendono facilmente leggibili sia dagli esseri umani che dalle macchine. Al contrario, i PDF generati da scansioni sono immagini statiche che non includono dati strutturati.

**Caratteristiche principali dei PDF nativi:**

1. **Testo Selezionabile e Ricercabile:** Il testo √® memorizzato in un formato leggibile, consentendo ricerche rapide e selezioni facili.
2. **Metadati Utili:** I PDF nativi includono informazioni aggiuntive come titolo, autore, parole chiave e data di creazione.
3. **Compatibilit√† con l'Intelligenza Artificiale:** Gli algoritmi possono analizzare il contenuto per estrarre dati, categorizzare informazioni e molto altro.
4. **Firmabili Digitalmente:** I PDF nativi possono essere facilmente firmati digitalmente, garantendo autenticazione, integrit√† e validit√† legale.

---

## Perch√© Evitare le Scansioni?

I PDF generati da scansioni presentano numerosi svantaggi:

- **Mancanza di Accessibilit√†:** Il testo √® incorporato come immagine, rendendo difficile l'accesso per software di lettura automatica.
- **Maggiore Peso del File:** I documenti scansionati richiedono pi√π spazio di archiviazione.
- **Ridotta Efficienza Energetica:** L'elaborazione di immagini richiede pi√π risorse computazionali rispetto al testo puro.

---

## Ecosostenibilit√† dei PDF Nativi

Adottare PDF nativi digitali √® una scelta che favorisce l'ambiente:

1. **Riduzione del Consumo di Carta:** I documenti digitali eliminano la necessit√† di stampe fisiche.
2. **Minore Impatto Energetico:** La creazione e l'archiviazione di PDF nativi richiede meno energia rispetto alla gestione di scansioni.
3. **Supporto al Lavoro Remoto:** Condividere file digitali facilita la collaborazione a distanza, riducendo la necessit√† di trasporti e riunioni in presenza.

---

## Metadati: Il Valore Aggiunto

I metadati rappresentano un elemento cruciale per rendere un documento utile nel contesto dell'intelligenza artificiale. Alcuni esempi includono:

- **Descrizione del Contenuto:** Per favorire l‚Äôindicizzazione nei motori di ricerca.
- **Dati Strutturati:** Essenziali per l‚Äôestrazione di informazioni tramite algoritmi di machine learning.
- **Informazioni di Licenza:** Per garantire un utilizzo corretto dei documenti.

---

## Raccomandazioni Finali

Per ottimizzare la creazione di PDF ecosostenibili e intelligenti:

1. **Usare Software Adeguati:** Strumenti come Adobe Acrobat, Microsoft Office e LibreOffice consentono di creare PDF nativi.
2. **Evitare le Stampa Fisica:** Condividere i file digitalmente riduce l‚Äôimpatto ambientale.
3. **Aggiungere Metadati Completi:** Inserire informazioni rilevanti durante la creazione del file.
4. **Promuovere la Digitalizzazione Consapevole:** Educare aziende e individui sui benefici dei PDF nativi.
5. **Utilizzare la Firma Digitale:** Applicare firme digitali per migliorare la sicurezza e la legalit√† dei documenti condivisi.

---

Scegliere PDF nativi digitali non √® solo una decisione pratica, ma un passo verso un futuro pi√π sostenibile e tecnologicamente avanzato. 

Abbracciamo questa opportunit√† per ridurre il nostro impatto ambientale e migliorare l‚Äôinterazione tra uomo e macchina.

## come √® fatto un PDF


![](./media/PdfInside.webp)


Un file PDF √® composto da diverse sezioni principali che lavorano insieme per organizzare i contenuti e le informazioni in modo efficace:

- Header (Intestazione): Contiene informazioni di base sul documento, come la versione del formato PDF e l'identificatore del file.

- Body (Corpo): La parte principale del PDF, che include testo, immagini, grafici e altri contenuti visuali. Ogni elemento √® organizzato in pagine e descritto tramite comandi specifici.

- Metadata (Metadati): Fornisce informazioni aggiuntive sul documento, come il titolo, l'autore, la data di creazione, e le parole chiave. Questi dati sono essenziali per la ricerca e la classificazione automatica.

- Cross-Reference Table: Un indice che elenca tutte le posizioni degli oggetti nel file, utile per un accesso rapido ai contenuti.

- Trailer (Pi√® di pagina): Chiude il file, indicando la posizione della tabella di riferimento incrociato e altre informazioni necessarie per la lettura del documento.

Questa struttura gerarchica consente ai PDF di essere compatti, versatili e facilmente leggibili sia dagli esseri umani che dai computer.


```{txt}
%PDF-1.3
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/Contents 4 0 R>>
endobj
4 0 obj
<</Filter /FlateDecode /Length 230>>
stream
x≈ìUP1N√Ñ0√¨√Ω≈†)¬°`√±√ö√û¬¨M‚Ä∞√†@TÀÜ‚ÄπD}Jr(pR¬æ¬è‚Äú√ò√ó≈í5√û‚Ñ¢√±z^≈í%Q√ºÀú√ª¬∑;;¬≤√≠¬è√≠r√•‚Äö#¬ç√ê$¬§≈†¬∂√á√ï√≥p√®‚Ä°√π√ª¬è√Øq√∞z3<√¨¬Æ√ë~√è√ì\√Ñx&NP¬Øk√ä4¬ù√∞~≈°¬ß¬æ:mvXl√à+¬æ=,q‚ÄòH√Å√£‚Ä¢G¬¶√Ñ√∞.√ß:4√ñR¬∏¬§√î‚Äû√ä:√£4√ãy*¬≤h‚Äπ¬≥¬≤-7k√∑¬ÅR@q
√ã¬™√ùr√´Ly¬µ√∞¬∫√ë√¶¬º√ú¬∑√É>Kc√Ä≈ìG√£\¬≥√¥)‚ÄìI=8¬¨√áM¬≤y<√†x¬Æ√ë√æ√ï√∏@‚Ä†Y√ê
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/Contents 6 0 R>>
endobj
6 0 obj
<</Filter /FlateDecode /Length 108>>
stream
x≈ì3R√∞√¢2√ê35W(√ßr
Q√êw3T04√ê30PISp
√°1
 ¬§!Àúr
≈°[Àú( ‚ÄúE√©\‚Ä¶

√©
@#≈í√åL√¥L√ç√å-√ç√¥≈í√çBR4√ú√≤√≥KR‚Äπ¬¨√ìS5B¬≤‚Ç¨F+r √¨√ë
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R ]
/Count 2
/MediaBox [0 0 595.28 841.89]
>>
endobj
7 0 obj
<</Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 7 0 R
>>
/XObject <<
>>
>>
endobj
8 0 obj
<<
/Producer (PyFPDF 1.7.2 http://pyfpdf.googlecode.com/)
/CreationDate (D:20250116092954)
>>
endobj
9 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 10
0000000000 65535 f 
0000000643 00000 n 
0000000832 00000 n 
0000000009 00000 n 
0000000087 00000 n 
0000000387 00000 n 
0000000465 00000 n 
0000000736 00000 n 
0000000936 00000 n 
0000001045 00000 n 
trailer
<<
/Size 10
/Root 9 0 R
/Info 8 0 R
>>
startxref
1148
%%EOF

```

Questo script √® un file PDF espresso in formato testuale. Pu√≤ essere suddiviso in sezioni principali per comprenderne la struttura:

---

### 1. **Dichiarazione della versione PDF**
   ```plaintext
   %PDF-1.3
   ```
   Specifica che il file utilizza la versione 1.3 del formato PDF.

---

### 2. **Oggetti principali**
   - **Oggetto 3**: Descrive una pagina del documento.
     ```plaintext
     3 0 obj
     <</Type /Page
     /Parent 1 0 R
     /Resources 2 0 R
     /Contents 4 0 R>>
     endobj
     ```
     - Tipo: `/Page`
     - Collegamento alla struttura genitore (`/Parent 1 0 R`).
     - Risorse della pagina (`/Resources 2 0 R`).
     - Contenuto della pagina (`/Contents 4 0 R`).

   - **Oggetto 4**: Contiene i dati compressi della pagina (testo e grafica).
     ```plaintext
     4 0 obj
     <</Filter /FlateDecode /Length 230>>
     stream
     ... [Dati compressi] ...
     endstream
     endobj
     ```

   - **Oggetto 5**: Descrive un'altra pagina del documento.
     ```plaintext
     5 0 obj
     <</Type /Page
     /Parent 1 0 R
     /Resources 2 0 R
     /Contents 6 0 R>>
     endobj
     ```

   - **Oggetto 6**: Contiene i dati compressi della seconda pagina.
     ```plaintext
     6 0 obj
     <</Filter /FlateDecode /Length 108>>
     stream
     ... [Dati compressi] ...
     endstream
     endobj
     ```

---

### 3. **Struttura delle pagine**
   - **Oggetto 1**: Organizza le pagine.
     ```plaintext
     1 0 obj
     <</Type /Pages
     /Kids [3 0 R 5 0 R ]
     /Count 2
     /MediaBox [0 0 595.28 841.89]
     >>
     endobj
     ```
     - Tipo: `/Pages`.
     - Elenco delle pagine (`/Kids`).
     - Numero di pagine (`/Count 2`).
     - Dimensioni della pagina (`/MediaBox`).

---

### 4. **Font**
   - **Oggetto 7**: Specifica il font utilizzato.
     ```plaintext
     7 0 obj
     <</Type /Font
     /BaseFont /Helvetica
     /Subtype /Type1
     /Encoding /WinAnsiEncoding
     >>
     endobj
     ```

---

### 5. **Risorse**
   - **Oggetto 2**: Collega il font alle risorse della pagina.
     ```plaintext
     2 0 obj
     <<
     /ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
     /Font <<
     /F1 7 0 R
     >>
     /XObject <<
     >>
     >>
     endobj
     ```

---

### 6. **Metadati**
   - **Oggetto 8**: Contiene informazioni sul produttore e la data di creazione.
     ```plaintext
     8 0 obj
     <<
     /Producer (PyFPDF 1.7.2 http://pyfpdf.googlecode.com/)
     /CreationDate (D:20250116092954)
     >>
     endobj
     ```

---

### 7. **Catalogo**
   - **Oggetto 9**: Collega le pagine al catalogo principale del PDF.
     ```plaintext
     9 0 obj
     <<
     /Type /Catalog
     /Pages 1 0 R
     /OpenAction [3 0 R /FitH null]
     /PageLayout /OneColumn
     >>
     endobj
     ```

---

### 8. **Tabella di riferimento incrociato (xref)**
   ```plaintext
   xref
   0 10
   0000000000 65535 f
   0000000643 00000 n
   ...
   ```

   La tabella di riferimento collega gli oggetti ai loro offset nel file.

---

### 9. **Trailer**
   ```plaintext
   trailer
   <<
   /Size 10
   /Root 9 0 R
   /Info 8 0 R
   >>
   ```

   Indica la dimensione del file, il catalogo (`/Root`) e i metadati (`/Info`).

---

### 10. **Fine del file**
   ```plaintext
   startxref
   1148
   %%EOF
   ```

   Specifica la posizione della tabella `xref` e segna la fine del file PDF.

---

Questa suddivisione evidenzia come il PDF sia organizzato in oggetti interconnessi che definiscono il contenuto, le risorse e i metadati del documento.


# modificare le caratteristiche con un editor

Modificare un file PDF direttamente in formato testuale con un editor (come Notepad++) richiede precisione. Ecco un esempio pratico e dettagliato:

---

### Obiettivo: Aggiungere un titolo (`/Title`) ai metadati del file.

Nel file fornito, i metadati sono definiti nell'oggetto **8 0 obj**:
```plaintext
8 0 obj
<<
/Producer (PyFPDF 1.7.2 http://pyfpdf.googlecode.com/)
/CreationDate (D:20250116092954)
>>
endobj
```

### Passaggi:
1. **Apri il file PDF con un editor di testo**:
   - Usa un editor come **Notepad++** o **VS Code**.
   - Assicurati di non modificare accidentalmente la struttura del file.

2. **Trova i metadati**:
   - Cerca l'oggetto che contiene il campo `/Producer`.

3. **Modifica i metadati**:
   - Aggiungi una nuova linea con il campo `/Title`.

### Modifica:
Ecco il risultato dopo la modifica:
```plaintext
8 0 obj
<<
/Producer (PyFPDF 1.7.2 http://pyfpdf.googlecode.com/)
/CreationDate (D:20250116092954)
/Title (Document Title Example)
>>
endobj
```

---

### Aggiornamento della tabella `xref`
Dopo aver modificato il file, √® necessario aggiornare la tabella di riferimento incrociato (`xref`), che elenca gli offset di ciascun oggetto.

#### Calcolo degli Offset:
L'offset √® la posizione del primo carattere dell'oggetto nel file, partendo da `0`. Puoi calcolarlo usando un editor avanzato che mostra la posizione del cursore in byte.

Esempio di tabella aggiornata:
```plaintext
xref
0 10
0000000000 65535 f 
0000000643 00000 n 
0000000832 00000 n 
...
```

---

### Verifica della Modifica
1. Salva il file come nuovo PDF.
2. Apri il PDF in un visualizzatore (come Adobe Reader) e verifica che il titolo sia stato aggiornato:
   - **File > Propriet√† > Descrizione**.

---

### Nota Importante:
Modificare un PDF a livello testuale √® delicato. Se sbagli anche solo un carattere, il file potrebbe corrompersi. Questo metodo √® utile solo per piccole modifiche ai metadati o al contenuto semplice.

Per modifiche pi√π complesse, √® consigliabile usare strumenti dedicati come:
- **`PyPDF2`** o **`pikepdf`** per modificare i PDF programmaticamente.
- **Adobe Acrobat Pro** per modifiche visuali. 




# creare un PDF con Python

```{python}
from fpdf import FPDF

# Create an instance of FPDF
pdf = FPDF()
pdf.add_page()

# Add header
pdf.set_font("Arial", size=12)
pdf.cell(200, 10, txt="Header: Single Page PDF", ln=True, align='C')

# Add "Hello World" text
pdf.ln(10)
pdf.set_font("Arial", size=16)
pdf.cell(200, 10, txt="Hello World", ln=True, align='L')

# Add a circle (approximated using ellipse function)
pdf.set_draw_color(0, 0, 255)
x_center, y_center, radius = 105, 100, 15
pdf.ellipse(x_center - radius, y_center - radius, radius * 2, radius * 2)

# Add placeholder for the image
pdf.ln(20)
pdf.set_fill_color(200, 200, 200)  # Light gray placeholder for image
pdf.rect(80, 120, 50, 30, 'F')  # Placeholder rectangle

# Add footer
pdf.set_y(-20)
pdf.set_font("Arial", size=10)
pdf.cell(0, 10, "Footer: Page 1", 0, 0, 'C')

# Save the PDF to a file
pdf.output("single_page_pdf.pdf")
```